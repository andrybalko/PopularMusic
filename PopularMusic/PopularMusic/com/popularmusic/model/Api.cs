// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using PopularMusic.com.popularmusic.model;
//
//    var apiModel = ApiTopArtistsModel.FromJson(jsonString);

namespace PopularMusic.com.popularmusic.model
{
	using System;
	using System.Collections.Generic;
	using System.ComponentModel.DataAnnotations;
	using System.ComponentModel.DataAnnotations.Schema;
	using System.Globalization;
	using System.Linq;
	using Newtonsoft.Json;
	using Newtonsoft.Json.Converters;

	public partial class ApiTopArtistsModel
	{
		[JsonProperty("topartists", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
		public TopArtists TopArtists { get; set; }
	}

	public partial class TopArtists
	{
		[JsonProperty("artist", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
		public List<Artist> Artist { get; set; }

		[JsonProperty("@attr", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
		public Attr Attr { get; set; }
	}

	public partial class Artist
	{
		[JsonIgnore]
		public string Country { get; set; }

		[JsonIgnore]
		[Key]
		public int Id { get; set; }

		[JsonProperty("name", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
		public string Name { get; set; }

		[JsonProperty("listeners", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(ParseStringConverter))]
		public long? Listeners { get; set; }

		[JsonProperty("mbid", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
		public Guid? Mbid { get; set; }

		[JsonProperty("url", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
		public Uri Url { get; set; }

		[JsonProperty("streamable", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(ParseStringConverter))]
		public long? Streamable { get; set; }

		[JsonProperty("image", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
		public List<Image> Image { get; set; }

		[JsonIgnore]
		public Uri Thumb => Image[0].Text;
	}

	public partial class Image
	{
		[JsonIgnore]
		public Artist Artist { get; set; }


		[JsonIgnore]
		[Key]
		public int Id { get; set; }

		[JsonProperty("#text", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
		public Uri Text { get; set; }

		[JsonProperty("size", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
		public Size? Size { get; set; }
	}

	public partial class Attr
	{
		[JsonIgnore]
		[Key]
		public int Id { get; set; }

		[JsonProperty("page", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(ParseStringConverter))]
		public long? Page { get; set; }

		[JsonProperty("perPage", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(ParseStringConverter))]
		public long? PerPage { get; set; }

		[JsonProperty("totalPages", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(ParseStringConverter))]
		public long? TotalPages { get; set; }

		[JsonProperty("total", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(ParseStringConverter))]
		public long? Total { get; set; }
	}

	public enum Size { Extralarge, Large, Medium, Mega, Small };

	public partial class ApiTopArtistsModel
	{
		public static ApiTopArtistsModel FromJson(string json) => JsonConvert.DeserializeObject<ApiTopArtistsModel>(json, PopularMusic.com.popularmusic.model.Converter.Settings);
	}

	public static class Serialize
	{
		public static string ToJson(this ApiTopArtistsModel self) => JsonConvert.SerializeObject(self, PopularMusic.com.popularmusic.model.Converter.Settings);
	}

	internal static class Converter
	{
		public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
		{
			MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
			DateParseHandling = DateParseHandling.None,
			Converters =
			{
				SizeConverter.Singleton,
				new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
			},
		};
	}

	internal class ParseStringConverter : JsonConverter
	{
		public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

		public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
		{
			if (reader.TokenType == JsonToken.Null) return null;
			var value = serializer.Deserialize<string>(reader);
			long l;
			if (Int64.TryParse(value, out l))
			{
				return l;
			}
			throw new Exception("Cannot unmarshal type long");
		}

		public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
		{
			if (untypedValue == null)
			{
				serializer.Serialize(writer, null);
				return;
			}
			var value = (long)untypedValue;
			serializer.Serialize(writer, value.ToString());
			return;
		}

		public static readonly ParseStringConverter Singleton = new ParseStringConverter();
	}

	internal class SizeConverter : JsonConverter
	{
		public override bool CanConvert(Type t) => t == typeof(Size) || t == typeof(Size?);

		public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
		{
			if (reader.TokenType == JsonToken.Null) return null;
			var value = serializer.Deserialize<string>(reader);
			switch (value)
			{
				case "extralarge":
					return Size.Extralarge;
				case "large":
					return Size.Large;
				case "medium":
					return Size.Medium;
				case "mega":
					return Size.Mega;
				case "small":
					return Size.Small;
			}
			throw new Exception("Cannot unmarshal type Size");
		}

		public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
		{
			if (untypedValue == null)
			{
				serializer.Serialize(writer, null);
				return;
			}
			var value = (Size)untypedValue;
			switch (value)
			{
				case Size.Extralarge:
					serializer.Serialize(writer, "extralarge");
					return;
				case Size.Large:
					serializer.Serialize(writer, "large");
					return;
				case Size.Medium:
					serializer.Serialize(writer, "medium");
					return;
				case Size.Mega:
					serializer.Serialize(writer, "mega");
					return;
				case Size.Small:
					serializer.Serialize(writer, "small");
					return;
			}
			throw new Exception("Cannot marshal type Size");
		}

		public static readonly SizeConverter Singleton = new SizeConverter();
	}







	public partial class ArtistTopAbumsModel
	{
		[JsonProperty("topalbums", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
		public Topalbums Topalbums { get; set; }
	}

	public partial class Topalbums
	{
		[JsonProperty("album", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
		public List<Album> Album { get; set; }

		[JsonProperty("@attr", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
		public Attr Attr { get; set; }
	}

	public partial class Album
	{
		[JsonIgnore]
		[Key]
		public int Id { get; set; }

		[JsonProperty("name", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
		public string Name { get; set; }

		[JsonProperty("playcount", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
		public long? Playcount { get; set; }



		[JsonProperty("url", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
		public Uri Url { get; set; }

		[JsonProperty("artist", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
		public ArtistShort Artist { get; set; }

		[JsonProperty("image", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
		public List<AlbumImage> Image { get; set; }

		[JsonIgnore]
		public Uri Thumb => Image[3].Text;
	}

	public partial class AlbumImage
	{
		[JsonIgnore]
		public Album Album { get; set; }

		[JsonIgnore]
		[Key]
		public int Id { get; set; }

		[JsonProperty("#text", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
		public Uri Text { get; set; }

		[JsonProperty("size", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
		public Size? Size { get; set; }
	}

	public partial class ArtistShort
	{
		[JsonIgnore]
		[Key]
		public int Id { get; set; }
		[JsonProperty("name", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
		public string Name { get; set; }

		[JsonProperty("mbid", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
		public Guid? Mbid { get; set; }

		[JsonProperty("url", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
		public Uri Url { get; set; }
	}

}